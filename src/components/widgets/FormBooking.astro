---
import Step1 from './Step1.astro';
import ProgressBarStep from '../ui/ProgressBarStep.astro';
import Step2 from './Step2.astro';
import Step4 from './Step4.astro';
import Step3 from './Step3.astro';
---

<style is:global>
  .icon-step {
    background-color: white;
  }

  .icon-step span {
    color: rgb(75 85 99 / 1);
  }

  .icon-active {
    background-color: #464c8f;
  }

  .icon-active span {
    color: white;
  }

  .card {
    animation: fade 450ms ease-in-out forwards;
  }

  .card.active {
    animation: fade-back 250ms ease-in-out both;
  }

  @keyframes fade {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }

  @keyframes fade-back {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
</style>

<script>
  import { servicesForms } from '@/utils/service-forms';

  function init() {
    if (window.location.pathname !== '/booking') return;
    const multiStepForm = document.querySelector('[data-multi-step]');
    const fieldsets = [...(multiStepForm?.querySelectorAll('fieldset') || [])];
    const progressBar = document.querySelectorAll('#progressbar > div');

    let currentStep = 0;

    function showStep(step: number) {
      fieldsets?.forEach((fieldset, index) => {
        fieldset.classList.toggle('active', index === step);
      });

      progressBar.forEach((stepElement, index) => {
        if (index === 0) return;
        const isStepActive = index <= step;
        stepElement
          .querySelector('.line-icon-step')
          ?.classList.toggle('bg-[#464c8f]', isStepActive);
        stepElement
          .querySelector('.icon-step')
          ?.classList.toggle('icon-active', isStepActive);
      });
    }

    function getFormHTMLForService(service: string) {
      switch (service) {
        case 'Regular Cleaning':
          return servicesForms['Regular Cleaning'];
        case 'One off Cleaning':
          return servicesForms['One off Cleaning'];
        case 'End of Tenancy Cleaning':
          return servicesForms['End of Tenancy Cleaning'];
        // Agrega mÃ¡s casos para los otros servicios si es necesario...
        default:
          return '';
      }
    }

    let buttons: NodeListOf<Element> | null = null;
    let checkboxes: NodeListOf<Element> | null = null;

    multiStepForm?.addEventListener('click', (e: any) => {
      let incrementor: number | null = null;
      if (e.target!.matches('[data-next]')) {
        incrementor = 1;
      } else if (e.target.matches('[data-previous]')) {
        currentStep += -1;
        return showStep(currentStep);
      }
      if (incrementor == null) return;

      switch (currentStep) {
        case 0:
          if (buttons && buttons?.length > 0) {
            buttons.forEach((button) => {
              button.removeEventListener('click', buttonClickHandler);
            });
          }

          if (checkboxes && checkboxes?.length > 0) {
            checkboxes.forEach((checkbox) => {
              checkbox.removeEventListener('change', checkboxChangeHandler);
            });
          }

          const h2Element = fieldsets[currentStep + 1].querySelector('h2');
          const selectElement = fieldsets[currentStep].querySelector('select');
          const formStep2 =
            fieldsets[currentStep + 1].querySelector('#form-step2');
          if (h2Element && selectElement && formStep2) {
            const selectedOptionText =
              selectElement.options[selectElement.selectedIndex].text;
            h2Element.textContent = selectedOptionText;
            const formHTML = getFormHTMLForService(selectedOptionText);
            formStep2.innerHTML = formHTML;

            buttons = formStep2.querySelectorAll('[data-input-counter]');
            buttons.forEach((button) => {
              button.addEventListener('click', buttonClickHandler);
            });

            checkboxes = formStep2.querySelectorAll('[input-option-checked]');
            checkboxes.forEach((checkbox) => {
              checkbox.addEventListener('change', checkboxChangeHandler);
            });
          }
          break;
        case 1:
          console.log('hola2');
          break;
        case 2:
          console.log('hola3');
          break;
      }

      const inputs = [...fieldsets[currentStep].querySelectorAll('input')];
      inputs.forEach((input) => {
        console.log(input.reportValidity());
        if (!input.reportValidity()) {
          input.classList.add('border-red-500');
        } else {
          input.classList.remove('border-red-500');
        }
      });

      const allValid = inputs.every((input) => input.reportValidity());

      if (allValid) {
        currentStep += incrementor;
        showStep(currentStep);
      }
    });

    function buttonClickHandler() {
      const inputId = this.getAttribute('data-input-counter');
      const operation = this.getAttribute('data-operation');
      const inputElement = document.getElementById(inputId) as HTMLInputElement;

      if (!inputElement) {
        return;
      }

      let minvalue = parseInt(inputElement.min) || 0;
      let value = parseInt(inputElement.value) || 0;

      if (operation === 'increment' && value < 9) {
        inputElement.value = (value + 1).toString();
      } else if (operation === 'decrement' && value > minvalue) {
        inputElement.value = (value - 1).toString();
      }
    }

    function checkboxChangeHandler() {
      const targetId = this.getAttribute('input-option-checked');
      const targetElement = document.getElementById(
        targetId
      ) as HTMLInputElement;

      if (!targetElement) {
        return;
      }

      const inputElements = targetElement.querySelectorAll('input');

      if (this.checked) {
        inputElements.forEach((input) => {
          input.disabled = false;
        });
        targetElement.classList.add('block');
        targetElement.classList.remove('hidden');
      } else {
        inputElements.forEach((input) => {
          input.disabled = true;
        });
        targetElement.classList.remove('block');
        targetElement.classList.add('hidden');
      }
    }

    fieldsets.forEach((step) => {
      step.addEventListener('animationend', (e: any) => {
        fieldsets[currentStep].classList.remove('hidden');
        e.target!.classList.toggle(
          'hidden',
          !e.target!.classList.contains('active')
        );
      });
    });
  }
  init();
  document.addEventListener('astro:after-swap', init);
</script>

<form data-multi-step class="bg-white p-4 md:p-12 w-full mx-auto relative">
  <div class="w-full py-6 px-2 md:px-10 my-4">
    <!-- progressbar -->
    <ProgressBarStep />

    <hr class="my-7 mx-2 md:mx-10 h-0.5 border-t-0 bg-neutral-100" />

    <Step1 />
    <Step2 />
    <Step3 />
    <Step4 />
  </div>
</form>
