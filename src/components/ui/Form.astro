---
import type { Form } from '@/types';
import Button from '@/components/ui/Button.astro';
import { validationForm } from '@/utils/validationForm';
import { sendEmail } from '@/utils/sendEmail';

const {
  inputs,
  textarea,
  disclaimer,
  serviceOption,
  button = 'Contact Us',
  description = '',
  subject = '',
} = Astro.props as Form;

let emailInfo = {
  confirm: 3,
};

const handlePostRequest = async () => {
  const data = await Astro.request.formData();

  const name = data.get('name');
  const email = data.get('email');
  const message = data.get('textarea');
  const chosenService = data.get('service');
  const phoneNumber = data.get('phone');

  const infoClient = {
    name,
    email,
    message,
    chosenService,
    phoneNumber,
    subject,
    serviceOption,
  };

  let { errors, information } = await validationForm(infoClient);
  const hasErrors = Object.values(errors).some((msg) => msg !== '');

  if (!hasErrors) {
    try {
      const emailResult = await sendEmail(information);
      emailInfo["emailResult"] = emailResult;

      if (emailResult) {
        emailInfo.confirm = 1;
        emailInfo['message'] = subject;
      } else {
        emailInfo.confirm = 2;
      }
    } catch (error) {
      console.error('Error sending email:', error);
      emailInfo.confirm = 2;
    }
  } else {
    console.log(errors);
  }
  
  return { hasErrors, emailInfo };
};
if (Astro.request.method === 'POST') {
  try {
    await handlePostRequest();
  } catch (validationError) {
    if (validationError instanceof Error) {
      console.error('Validation error:', validationError.message);
    }
  }
}
---

<div>
  <form method="POST" data-astro-reload>
    {
      inputs &&
        inputs.map(
          ({
            type = 'text',
            name,
            label = '',
            autocomplete = 'on',
            placeholder = '',
            pattern,
            title,
          }) =>
            name && (
              <div class="mb-6">
                {label && (
                  <label for={name} class="block text-sm font-medium">
                    {label}
                  </label>
                )}
                <input
                  type={type}
                  name={name}
                  id={name}
                  pattern={pattern}
                  autocomplete={autocomplete}
                  placeholder={placeholder}
                  title={title}
                  class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200  bg-white "
                  required
                  minlength="5"
                />
              </div>
            )
        )
    }

    {
      textarea && (
        <div>
          <label for="textarea" class="block text-sm font-medium">
            {textarea.label}
          </label>
          <textarea
            id="textarea"
            name="textarea"
            rows={textarea.rows ? textarea.rows : 4}
            placeholder={textarea.placeholder}
            class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200  bg-white "
            required
            minlength="10"
          />
        </div>
      )
    }

    {
      serviceOption && (
        <div class="mb-6">
          <label for="service" class="block text-sm font-medium">
            {serviceOption.label}
          </label>
          <select
            name="service"
            id="service"
            class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 bg-white"
            required
          >
            <option value="">Choose a service</option>
            {serviceOption.servicesLinks.map(({ text }) => (
              <option value={text.charAt(0) + text.slice(1).toLowerCase()}>
                {text.charAt(0) + text.slice(1).toLowerCase()}
              </option>
            ))}
          </select>
        </div>
      )
    }

    {
      disclaimer && (
        <div class="mt-3 flex items-start mb-6">
          <div class="flex mt-0.5">
            <input
              id="disclaimer"
              name="disclaimer"
              type="checkbox"
              class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200  bg-white"
              required
            />
          </div>
          <div class="ml-3">
            <label
              for="disclaimer"
              class="cursor-pointer select-none text-sm text-gray-600 "
            >
              {disclaimer.label}
            </label>
          </div>
        </div>
      )
    }

    {
      button && (
        <div class="mt-10 grid">
          <Button variant="primary" type="submit">
            {button}
          </Button>
        </div>
      )
    }

    {
      description && (
        <div class="mt-3 text-center">
          <p class="text-sm text-gray-600 ">{description}</p>
        </div>
      )
    }
  </form>
  {
    emailInfo?.confirm === 1 ? (
      <script>
        const info = {
            status: true,
          } 
        window.localStorage.setItem("Info",JSON.stringify(info))
        window.location.href=`/email-status`
        </script>
    ) : (
      emailInfo?.confirm === 2 && (
        <script>
          const path = window.location.pathname;
          const info = {
            path,
            status: false,
          } 

          window.localStorage.setItem("Info",JSON.stringify(info))
          window.location.href=`/email-status`
        </script>
      )
    )
  }
</div>
